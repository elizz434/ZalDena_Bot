# === –ë–ª–æ–∫ 1: –ò–º–ø–æ—Ä—Ç—ã –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
import telebot
from telebot import types
from datetime import datetime
import sqlite3
import time
import logging
import re
import threading

TOKEN = '8329374119:AAHWFWxo3M3KVNnkhf-pBsCZADM5k0F3Ub8'
GROUP_CHAT_ID = -1002998344604

bot = telebot.TeleBot(TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='bot.log',
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

logging.info("==== –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ====")

# === ID –∞–¥–º–∏–Ω–∞ ===
ADMIN_IDS = [864962887, 5945450515, 296228144, 700143435,]

# === –ë–ª–æ–∫ 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü ===

# === –ë–ª–æ–∫ DBManager ===
class DBManager:
    def __init__(self, db_name='visits.db'):
        self.db_name = db_name
        self.lock = threading.Lock()

    def execute(self, query, params=(), fetchone=False, fetchall=False, commit=False, return_lastrowid=False):
        with self.lock:
            conn = sqlite3.connect(self.db_name)
            cursor = conn.cursor()
            try:
                cursor.execute(query, params)
                if commit:
                    conn.commit()
                if return_lastrowid:
                    return cursor.lastrowid
                if fetchone:
                    return cursor.fetchone()
                if fetchall:
                    return cursor.fetchall()
            finally:
                conn.close()

    def executemany(self, query, param_list, commit=False):
        with self.lock:
            conn = sqlite3.connect(self.db_name)
            cursor = conn.cursor()
            try:
                cursor.executemany(query, param_list)
                if commit:
                    conn.commit()
            finally:
                conn.close()
db = DBManager()

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã ===
def initialize_database():
    db.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            fio TEXT,
            state TEXT DEFAULT NULL
        )
    ''', commit=True)

    db.execute('''
        CREATE TABLE IF NOT EXISTS requests (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            date TEXT,
            status TEXT DEFAULT 'pending'
        )
    ''', commit=True)

    db.execute('''
        CREATE TABLE IF NOT EXISTS schedule (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            file_id TEXT,
            caption TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''', commit=True)

    db.execute('''
        CREATE TABLE IF NOT EXISTS payments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            file_id TEXT,
            caption TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''', commit=True)

initialize_database()
print("–ü—Ä–æ–≤–µ—Ä–∫–∞ SELECT:", db.execute("SELECT name FROM sqlite_master WHERE type='table'", fetchall=True))

# === –ë–ª–æ–∫ 3: –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===

def send_main_menu(user_id):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–†–∞–∑–æ–≤–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ", "–ê—Ä–µ–Ω–¥–∞")
    keyboard.add("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–°–≤–æ–π –≤–æ–ø—Ä–æ—Å")
    keyboard.add("–û–ø–ª–∞—Ç–∞")
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

def is_registered(user_id):
    result = db.execute('SELECT fio FROM users WHERE user_id = ?', (user_id,), fetchone=True)
    return result
    
def has_approved_request(user_id):
    result = db.execute('''
        SELECT id FROM requests
        WHERE user_id = ? AND status = 'approved' AND datetime(date, 'start of day') >= datetime('now', 'start of day')
        ORDER BY date LIMIT 1
    ''', (user_id,), fetchone=True)
    return result is not None

# === –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (user_state) ===
def set_user_state(user_id, state):
    logging.debug(f"set_user_state: {user_id} -> {state}")
    try:
        db.execute('UPDATE users SET state = ? WHERE user_id = ?', (state, user_id), commit=True)
        print(f"[DEBUG] set_user_state: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {state} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        logging.error(f"[ERROR] set_user_state –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


def get_user_state(user_id):
    try:
        result = db.execute('SELECT state FROM users WHERE user_id = ?', (user_id,), fetchone=True)
        return result[0] if result else None
    except Exception as e:
        logging.error(f"get_user_state error for user {user_id}: {e}")
        return None

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
@bot.message_handler(func=lambda m: m.text in ["–†–∞–∑–æ–≤–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ", "–ê—Ä–µ–Ω–¥–∞", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–°–≤–æ–π –≤–æ–ø—Ä–æ—Å", "–û–ø–ª–∞—Ç–∞"])
def handle_menu_buttons(message):
    user_id = message.chat.id
    text = message.text 
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {message.text}")

    # —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ª—é–±–æ–º –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    set_user_state(user_id, None)

    if text == "–†–∞–∑–æ–≤–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ":
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è, –≤–∞–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ:\n 25.10.2025 14:00\n –ú—ã –æ—Ç–≤–µ—Ç–∏–º –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ.\n–ü–æ—Å–ª–µ –≤—ã—à–ª–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã.")
        set_user_state(user_id, "waiting_for_date")
        print(f"[DEBUG] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: waiting_for_date –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    elif text == "–ê—Ä–µ–Ω–¥–∞":
        bot.send_message(user_id, "üõ† –î–ª—è –∞—Ä–µ–Ω–¥—ã –∑–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –¥–Ω–∏, —á–∞—Å—ã –∏ –≤–∏–¥ –∑–∞–Ω—è—Ç–∏–π –Ω–∞—à–µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\nüëâ @zaldena. ")

    elif text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        send_schedule_if_exists(user_id)

    elif text == "–°–≤–æ–π –≤–æ–ø—Ä–æ—Å":
        bot.send_message(user_id, "‚ùì –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\nüëâ @zaldena")
        set_user_state(user_id, "waiting_for_question")

    elif text == "–û–ø–ª–∞—Ç–∞":
        bot.send_message(user_id, "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:\nüëâ –ø–æ –Ω–æ–º–µ—Ä—É +79220000320 –Ω–∞ —Å–±–µ—Ä–±–∞–Ω–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ —á–µ–∫–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç.")
        set_user_state(user_id, "waiting_for_payment")

# –û—Ç–¥–µ–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã
@bot.message_handler(func=lambda m: get_user_state(m.chat.id) == "waiting_for_date")
def handle_waiting_for_date(message):
    process_date(message)

# === –ë–ª–æ–∫ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start ===
@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.chat.id
    if is_registered(user_id):
        bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        send_main_menu(user_id)
    else:
        bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –ï—Å–ª–∏ —Ç—ã —Ç—É—Ç –ø–µ—Ä–≤—ã–π —Ä–∞–∑, –Ω–∞–ø–∏—à–∏,–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–µ –§–ò–û, —á—Ç–æ–±—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è.")
        bot.register_next_step_handler(message, register_user)

# === –ë–ª–æ–∫ 5: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
def register_user(message):
    user_id = message.chat.id
    fio = message.text.strip()
    db.execute(
        'REPLACE INTO users (user_id, fio, state) VALUES (?, ?, NULL)',
        (user_id, fio),
        commit=True
    )
    bot.send_message(user_id, f"–°–ø–∞—Å–∏–±–æ, {fio}, –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    send_main_menu(user_id)
    logging.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user_id} - {fio}")

# === –ë–ª–æ–∫ 7: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
@bot.message_handler(func=lambda m: get_user_state(m.chat.id) == "waiting_for_question")
def handle_question_message(message):
    user_id = message.chat.id
    question = message.text.strip()

    row = db.execute('SELECT fio FROM users WHERE user_id = ?', (user_id,), fetchone=True)
    fio = row[0] if row else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    bot.send_message(GROUP_CHAT_ID, f"üì© –í–æ–ø—Ä–æ—Å –æ—Ç {fio} (ID: {user_id}):\n{question}")
    bot.send_message(user_id, "–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ú—ã —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º.")
    set_user_state(user_id, None)

# === –ë–ª–æ–∫ 8: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ ===
def process_date(message):
    user_id = message.chat.id
    date_text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–∫—É
    if not re.match(r'^\d{2}\.\d{2}\.\d{4} \d{2}:\d{2}$', date_text):
        bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 25.10.2025 14:00")
        set_user_state(user_id, "waiting_for_date")
        logging.warning(f"[FORMAT ERROR] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤—ë–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–∞—Ç—É: {date_text}")
        
        # üîÅ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π next_step_handler
        bot.register_next_step_handler(message, process_date)
        return

    # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    set_user_state(user_id, None)

    try:
        visit_datetime = datetime.strptime(date_text, "%d.%m.%Y %H:%M")
        visit_str = visit_datetime.strftime("%d.%m.%Y %H:%M")

        row = db.execute('SELECT fio FROM users WHERE user_id = ?', (user_id,), fetchone=True)
        if not row:
            bot.send_message(user_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        fio = row[0]

        request_id = db.execute(
            'INSERT INTO requests (user_id, date, status) VALUES (?, ?, ?)',
             (user_id, visit_str, 'pending'),
            commit=True,
            return_lastrowid=True
        )
        logging.debug(f"[DEBUG] –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {request_id}")


        # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        keyboard = types.InlineKeyboardMarkup()
        yes_btn = types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{request_id}")
        no_btn = types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{request_id}")
        keyboard.add(yes_btn, no_btn)
        print(f"[DEBUG] –ö–Ω–æ–ø–∫–∞ approve: approve_{request_id}")


        admin_text = (
            f"üì© –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å #{request_id}\n"
            f"üë§ –§–ò–û: {fio}\n"
            f"üìÖ –î–∞—Ç–∞: {visit_str}\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∏–∑–∏—Ç?"
        )
        bot.send_message(GROUP_CHAT_ID, admin_text, reply_markup=keyboard)
        bot.send_message(user_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è - 10 –º–∏–Ω—É—Ç.")
        logging.info(f"User {user_id} ({fio}) –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–∞–∑–æ–≤–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ: {visit_str}")

    except Exception as e:
        logging.error(f"[PROCESS_DATE ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        set_user_state(user_id, "waiting_for_date")
        bot.register_next_step_handler(message, process_date)



# === –ë–ª–æ–∫ 9: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ===
@bot.callback_query_handler(func=lambda call: call.data.startswith("approve_") or call.data.startswith("reject_"))
def handle_admin_decision(call):
    action, request_id = call.data.split("_")
    print(f"[DEBUG] Callback: action={action}, request_id={request_id}")

    request_id = int(request_id)

    row = db.execute('SELECT user_id, date, status FROM requests WHERE id = ?', (request_id,), fetchone=True)
    if not row:
        bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    user_id, date_str, status = row
    if status != 'pending':
        bot.answer_callback_query(call.id, "–≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
        return
   
        db.execute('UPDATE requests SET status = ? WHERE id = ?', ('approved', request_id), commit=True)

    if action == 'approve':

        db.execute('UPDATE requests SET status = ? WHERE id = ?', ('approved', request_id), commit=True)

        bot.send_message(user_id, f"‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ {date_str} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ñ–¥—ë–º –≤–∞—Å!")
        bot.send_message(user_id, "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n+7 922 000 0320\n–°–±–µ—Ä–±–∞–Ω–∫\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ —á–µ–∫–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.")
        set_user_state(user_id, "waiting_for_payment")
        bot.send_message(GROUP_CHAT_ID, f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ {call.from_user.first_name}.")
        logging.info(f"–ó–∞—è–≤–∫–∞ #{request_id} {'–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞' if action == 'approve' else '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'} –∞–¥–º–∏–Ω–æ–º {call.from_user.id}")


    else:  # reject
        db.execute('UPDATE requests SET status = ? WHERE id = ?', ('rejected', request_id), commit=True)

        bot.send_message(user_id, "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ —Å–º–æ–∂–µ–º –≤–∞—Å –≤–ø—É—Å—Ç–∏—Ç—å –≤ —ç—Ç–æ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.")
        bot.send_message(GROUP_CHAT_ID, f"‚ùå –ó–∞—è–≤–∫–∞ #{request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ {call.from_user.first_name}.")
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è:")
        bot.register_next_step_handler_by_chat_id(user_id, process_date)

    bot.answer_callback_query(call.id)

# === –ë–ª–æ–∫ 11: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–≥—Ä—É–ø–ø–∞) ===
@bot.message_handler(content_types=['photo'], chat_types=['group', 'supergroup'])
def handle_schedule_photo_group(message):
    if message.caption and '#—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ' in message.caption.lower():
        file_id = message.photo[-1].file_id
        caption = message.caption

        db.execute('DELETE FROM schedule', commit=True)
        db.execute('INSERT INTO schedule (file_id, caption) VALUES (?, ?)', (file_id, caption), commit=True)

        bot.send_message(message.chat.id, "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

# === –ë–ª–æ–∫ 12: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ===

@bot.message_handler(func=lambda m: m.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
def handle_schedule_request(message):
    user_id = message.chat.id
    send_schedule_if_exists(user_id)

def has_approved_request(user_id):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞—è–≤–∫–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'approved'
    row = db.execute('SELECT id FROM requests WHERE user_id = ? AND status = ?', (user_id, 'approved'), fetchone=True)
    return row is not None

@bot.message_handler(content_types=['photo'], chat_types=['private', 'group', 'supergroup'])
def handle_photo(message):
    user_id = message.chat.id
    current_state = get_user_state(user_id)
    caption = message.caption or "(–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏)"
    file_id = message.photo[-1].file_id

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–≥—Ä—É–ø–ø–∞/–∞–¥–º–∏–Ω)
    if message.caption and '#—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ' in message.caption.lower():
        if (message.chat.type == 'private' and user_id in ADMIN_IDS) or message.chat.type in ['group', 'supergroup']:
            db.execute('DELETE FROM schedule', commit=True)
            db.execute('INSERT INTO schedule (file_id, caption) VALUES (?, ?)', (file_id, caption), commit=True)
            bot.send_message(user_id, "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
            logging.info(f"–ê–¥–º–∏–Ω {user_id} –∑–∞–≥—Ä—É–∑–∏–ª –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
            return

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —á–µ–∫
    if current_state == "waiting_for_payment":
        if not has_approved_request(user_id):
            bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏. –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å, –ø—Ä–µ–∂–¥–µ —á–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —á–µ–∫.")
            logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –±–µ–∑ –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ –æ—Ç {user_id}")
            return

        set_user_state(user_id, None)

        row = db.execute('SELECT fio FROM users WHERE user_id = ?', (user_id,), fetchone=True)
        fio = row[0] if row else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        db.execute('INSERT INTO payments (user_id, file_id, caption) VALUES (?, ?, ?)', (user_id, file_id, caption), commit=True)
        bot.send_photo(GROUP_CHAT_ID, file_id, caption=f"üí∞ –ß–µ–∫ –æ—Ç {fio}:\nüìù {caption}")
        bot.send_message(user_id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –î–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ –∑–∞–ª–µ!")
        logging.info(f"–ü–æ–ª—É—á–µ–Ω —á–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {caption}")
        return

    bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

# === –∞–¥–º–∏–Ω—Å—á–∫–∏–µ –∫–Ω–æ–ø–∫–∏ ===

@bot.message_handler(commands=['admin'])
def admin_menu(message):
    print(f"/admin –≤—ã–∑–≤–∞–Ω –æ—Ç {message.from_user.id}")
    if message.from_user.id not in ADMIN_IDS:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é.")
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ /admin")
        return

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="show_users"),
        types.InlineKeyboardButton("üóì –ó–∞—è–≤–∫–∏", callback_data="show_requests"),
        types.InlineKeyboardButton("üí∞ –ß–µ–∫–∏", callback_data="show_payments")
    )

    bot.send_message(message.chat.id, "üîê –ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data in ["show_users", "show_requests", "show_payments"])
def handle_admin_buttons(call):
    user_id = call.from_user.id
    if user_id not in ADMIN_IDS:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    if call.data == "show_users":
        users = db.execute('SELECT user_id, fio FROM users', fetchall=True)
        if not users:
            bot.send_message(call.message.chat.id, "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        else:
            msg = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
            for uid, fio in users:
                msg += f"- {fio} (ID: {uid})\n"
            bot.send_message(call.message.chat.id, msg)

    elif call.data == "show_requests":
        rows = db.execute('''
            SELECT r.id, u.fio, r.date, r.status
            FROM requests r
            JOIN users u ON r.user_id = u.user_id
            ORDER BY r.id DESC
        ''', fetchall=True)
        if not rows:
            bot.send_message(call.message.chat.id, "–ù–µ—Ç –∑–∞—è–≤–æ–∫.")
        else:
            msg = "üìÑ –ó–∞—è–≤–∫–∏:\n"
            for req_id, fio, date, status in rows:
                icons = {'pending': '‚è≥', 'approved': '‚úÖ', 'rejected': '‚ùå'}
                icon = icons.get(status, '')
                msg += f"{icon} #{req_id} ‚Äî {fio}, {date} ‚Äî {status.upper()}\n"
            bot.send_message(call.message.chat.id, msg)

    elif call.data == "show_payments":
        rows = db.execute('''
            SELECT p.id, u.fio, p.caption, p.timestamp
            FROM payments p
            JOIN users u ON p.user_id = u.user_id
            ORDER BY p.timestamp DESC
            LIMIT 20
        ''', fetchall=True)
        if not rows:
            bot.send_message(call.message.chat.id, "–ù–µ—Ç —á–µ–∫–æ–≤.")
        else:
            msg = "üí∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —á–µ–∫–∏:\n"
            for pid, fio, caption, ts in rows:
                msg += f"#{pid} ‚Äî {fio} ‚Äî {ts}\nüìé {caption}\n\n"
            bot.send_message(call.message.chat.id, msg)

    bot.answer_callback_query(call.id)


def send_schedule_if_exists(user_id):
    result = db.execute('SELECT file_id, caption FROM schedule ORDER BY timestamp DESC LIMIT 1', fetchone=True)
    if result:
        file_id, caption = result
        bot.send_photo(user_id, photo=file_id, caption=caption)
    else:
        bot.send_message(user_id, "‚ö†Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.")

# === –ë–ª–æ–∫ 13: –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω... –û–∂–∏–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è.")
while True:
    try:
        bot.polling(none_stop=True, interval=0)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –≤ bot.polling:")
        time.sleep(5)

        db.execute('INSERT INTO payments (user_id, file_id, caption) VALUES (?, ?, ?)', (user_id, file_id, caption), commit=True)
